/*
  ==============================================
  Code developed by Nícolas Auersvalt
  Project Robotic Arm with Claw
  Current Version (1.0)
  ==============================================
*/
/*

  Será necessário testar os ângulos limites da garra
  e depois substituir os valores em claw_min_lim e
  claw_max_lim.

  Pensar em um modo de otimizar a função da garra
  pois o código lerá toda vez a mesma função.

  É necessário atualizar o pino que o motor da
  garra está conectada.

  Verificar se por estar conectado a um pino
  analógico, a garra vai imprimir valores digitais
  ou analógicos e converter esse valor utilizando
  uma função map diretamente no valor mínimo limite
  e máximo limite.


  // Joystick padrões
  Altura:
    69 ou 504 (analog)
  Profundidade:
    45 ou 500 (analog)

   /* Joystick padrões
  Altura:
    69 ou 504 (analog)
  Profundidade:
    45 ou 500 (analog)

    // Limites Máximos
  int right_max_lim = 120;
  int left_max_lim = 73;

  // Limites Mínimos
  int right_min_lim = 20;
  int left_min_lim = 20;

  Joystick para:

  Direita:
  Altura 54 -> 20 // Desce

  Esquerda:
  Altura: 54 -> 90  // Sobe

  Frente:
  Profundidade: 69 -> 20 // Retrai

  Trás:
  Profundidade: 69 -> 120 // Inclina



    if(left_angle < 72 && right_angle < 48){ // X e Y negativos
    }

    if(left_angle < 72 && right_angle > 48){ // X negativo e Y positivo
    }

    if(left_angle > 72 && right_angle < 48){ // X positivo e Y negativo
    }
  }

  Profundidade, definido pelo motor Right, é o motor  da direita em relação à posição posterior à garra
  e que exerce unicamente a função de retrair e protrair o braço.
  Altura, definida pelo motor Left, é o motor da esquerda em relação à posição posterior à garra e que
  exerce unicamente a função de elevar e descer o braço, ou seja, quando ele desce (diminui o ângulo
  do motor) aumenta o ângulo entre o antebraço e o corpo do braço; já ao elevar (aumentando o ângulo)
  diminui o ângulo entre o antebraço e o corpo do braço



*/

#include <Servo.h>

// Micro Servos
Servo left; // Left Side Arm
Servo right; // Right Side Arm
Servo bottom; // Base Servo
Servo claw; // Claw Servo

// Joystick
#define axis_y A2
#define axis_x A3
#define button 6
#define pot A1
int pos = 0;

// Limites Máximos
int right_max_lim = 120;
int left_max_lim = 60;

// Ângulos Padrões

int right_pad = 69;
int left_pad = 54;

// Intervalos

int right_interval_max = 72;
int right_interval_min = 65;

int left_interval_max = 48;
int left_interval_min = 42;

// Limites Mínimos
int right_min_lim = 20;
int left_min_lim = 20;

// Limites da Base
int base_min_lim = 1;
int base_max_lim = 180;

// Limites das garras
int claw_min_lim = 1;
int claw_max_lim = 1;

// Tempos de Delays
const int tmp = 1000;
const int tmp_motors = 40;

void setup() {

  Serial.begin(9600);

  // Pins
  left.attach(2);
  right.attach(3);
  bottom.attach(5);
  claw.attach(4);

  // Joystick
  pinMode(axis_x, INPUT);
  pinMode(axis_y, INPUT);
  pinMode(button, INPUT);
}

void loop() {
/*
  // Leitura dos pinos
  int angle_l = analogRead(2);
  int angle_r = analogRead(3);

  // Leitura do Botão do Joystick
  int btn = digitalRead(6);

  // Abrir e Fechar Garras
  if (btn == 1) {
    bottom.write(claw_max_lim);
    delay(tmp_motors);
  }
  else {
    bottom.write(claw_min_lim);
    delay(tmp_motors);
  }

  // Leitura e convesão para dois limites da Base
  int base_ang = map(analogRead(axis_x), 0, 1023, base_max_lim, base_max_lim);

  // Conversão da voltagem Analógica para a Analógica dos Lados
  int left_angle = map(angle_l, 0, 1023, left_min_lim, left_max_lim); // Altura  20 / 73
  int right_angle = map(angle_r, 0, 1023, right_min_lim, right_max_lim); // Profundidade 20 / 120



  if ((left_angle <= left_interval_min && right_angle >= right_interval_max) \
      || (left_angle <= left_interval_min && right_angle <= right_interval_min) \
      || (left_angle >= left_interval_max && right_angle >= right_interval_max) \
      || (left_angle >= left_interval_max && right_angle <= right_interval_min)) {
    Serial.println("Joystick Deslocado");
    Serial.println();

    // Joystick Direita Inferior

    if (left_angle < left_interval_min && right_angle > right_interval_max) {
      for (int n = left_pad, m = right_pad; n > left_angle || m > right_angle; n--, m++)  {
        Serial.println("Joystick Direita Inferior");
        left.write(n);
        right.write(m);
        delay(tmp_motors);
      }
    }

    // Joystick Esquerda Inferior

    else if (left_angle > left_interval_max && right_angle > right_interval_max) {
      for (int n = left_pad, m = right_pad; n < left_angle || m > right_angle; n++, m++)  {
        Serial.println("Joystick Esquerda Inferior");
        left.write(n);
        right.write(m);
        delay(tmp_motors);
      }
    }

    // Joystick Esquerda Superior

    else if (left_angle > left_interval_max && right_angle < right_interval_min) {
      for (int n = left_pad, m = right_pad; n < left_angle || m < right_angle; n++, m--)  {
        Serial.println("Joystick Esquerda Superior");
        left.write(n);
        right.write(m);
        delay(tmp_motors);
      }
    }

    // Joystick Direita Superior

    else if (left_angle < left_interval_min && right_angle < right_interval_min) {
      Serial.println("Joystick Direita Superior");
      for (int n = left_pad, m = right_pad; n > left_angle || m < right_angle; n--, m--)  {

        left.write(n);
        right.write(m);
        delay(tmp_motors);
      }
    }

    // Joystick Esquerda

    else if (left_angle > left_interval_max && right_angle < right_interval_max \
    || right_angle > right_interval_min) {
      for (int n = left_pad; n < left_angle; n++)  {
        Serial.println("Joystick Esquerda");
        left.write(n);
        right.write(right_pad);
        delay(tmp_motors);
      }
    }

    // Joystick Direita

    else if (left_angle < left_interval_min && right_angle == right_pad) {
      for (int n = left_pad; n > left_angle - 1; n--)  {
        Serial.println("Joystick Direita");
        left.write(n);
        right.write(right_pad);
        delay(tmp_motors);
      }
    }

    // Joystick Trás

    else if (left_angle == left_pad && right_angle > right_interval_max) {
      for (int m = right_pad; m < right_angle - 1; m++)  {
        Serial.println("Joystick Trás");
        left.write(left_pad);
        right.write(m);
        delay(tmp_motors);
      }
    }

    // Joystick Frente

    else if (left_angle == left_pad && right_angle < right_interval_min) {
      for (int m = right_pad; m > right_angle; m--)  {
        Serial.println("Joystick Frente");
        left.write(left_pad);
        right.write(m);
        delay(tmp_motors);
      }
    }
  }
  else {
    Serial.println("Joystick Parado");
    Serial.println();
    Serial.println("Eixo X");
    Serial.print(left_angle);
    Serial.println();
    Serial.println("Eixo Y");
    Serial.print(right_angle);
    Serial.println();
    left.write(left_pad);
    right.write(right_pad);
    delay(tmp_motors);
  }
/*
  pos = map(analogRead(pot), 0, 1023, 0, 180);
  claw.write(pos);
  delay(15);
  /*

    // Gira o Motor da Base
    bottom.write(base_ang);
    delay(tmp_motors);

    // Gira o Motor da Esquerda
    left.write(left_angle);
    delay(tmp_motors);

    // Gira o Motor da Direita
    right.write(right_angle);
    delay(tmp_motors);
  */
}
