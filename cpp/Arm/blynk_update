/*
  ==============================================
  Code developed by Nícolas Auersvalt
  Project Robotic Arm with Claw
  Current Version (1.0)
  ==============================================
*/
/*

  Será necessário testar os ângulos limites da garra
  e depois substituir os valores em claw_min_lim e
  claw_max_lim.

  Pensar em um modo de otimizar a função da garra
  pois o código lerá toda vez a mesma função.

  É necessário atualizar o pino que o motor da
  garra está conectada.

  Verificar se por estar conectado a um pino
  analógico, a garra vai imprimir valores digitais
  ou analógicos e converter esse valor utilizando
  uma função map diretamente no valor mínimo limite
  e máximo limite.

  ! Testar se While é melhor do que If na parte Blink (V3),
  pois direcionaria todo o processo para while (neste caso, 
  nas ações dos servos), enquanto que if apenas rodaria o
  código inteiro infinitamente.

*/

#include <Servo.h>

// Blink App
#define BLYNK_TEMPLATE_ID "TMPLrG9kgao2"
#define BLYNK_DEVICE_NAME "ESP8266"
#define BLYNK_AUTH_TOKEN "NpE9rh2CVCOxYIGL-78m3zfKID46Rtvh"
#define BLYNK_PRINT Serial

#include <ESP8266_Lib.h>
#include <BlynkSimpleShieldEsp8266.h>
#include <SoftwareSerial.h>

// You should get Auth Token in the Blynk App.
char auth[] = BLYNK_AUTH_TOKEN;

// Your WiFi credentials.
// Set password to "" for open networks.
char ssid[] = "Nicolas_2.4";
char pass[] = "7707224527";

#define EspSerial Serial1

// ESP Pins

#define rx A5
#define tx A4
SoftwareSerial EspSerial(rx, tx);  // RX, TX

// Your ESP8266 baud rate:
#define ESP8266_BAUD 9600

ESP8266 wifi(&EspSerial);

// Micro Servos
Servo left;    // Left Side Arm
Servo right;   // Right Side Arm
Servo bottom;  // Base Servo
Servo claw;    // Claw Servo

// Joystick
#define axis_y A2
#define axis_x A3
#define button 6

// Limites Máximos
int right_max_lim = 100;  // 120
int left_max_lim = 60;    // 73

// Limites Mínimos
int right_min_lim = 40;  // 20
int left_min_lim = 40;

// Limites da Base
int base_min_lim = 1;
int base_max_lim = 180;

// Limites das garras
int claw_min_lim = 40;
int claw_max_lim = 100;

// Valores padrão
int base_padrao = 90;
int pinValue_left;
int pinValue_right;
int pinValue_prof;
int pinValue_alt;
int pinValue_claw;
int on_off;

// Tempos de Delays
const int tmp = 1000;
const int tmp_motors = 1000;

// Pinos
#define leftPin A1
#define rightPin A2
#define bottomPin A3
#define clawPin 3

void arm(int pinValue_prof, int pinValue_alt) {

    Serial.print("Braço"); 
    Serial.println();

  if (pinValue_prof == 1) {
    
    Serial.print("Lá");
    Serial.println();

    left.attach(leftPin);
    left.write(left_max_lim);  // Gira à esquerda
    delay(tmp_motors);
    left.detach();
  }

  // Left Off
  else if (pinValue_prof == 0) {

    Serial.print("Aqui");
    Serial.println();

    left.attach(leftPin);
    left.write(left_min_lim);  // Padroniza
    delay(tmp_motors);
    left.detach();
  }

  //

  else if (pinValue_alt == 1) {

    Serial.print("Alto");
    Serial.println();

    right.attach(rightPin);
    right.write(right_min_lim);  // Gira à esquerda
    delay(tmp_motors);
    right.detach();
  }

  // Left Off
  else if (pinValue_alt == 0) {

    Serial.print("Baixo");
    Serial.println();

    right.attach(rightPin);
    right.write(right_max_lim);  // Padroniza
    delay(tmp_motors);
    right.detach();
  }
}

void top(int pinValue_claw) {

  Serial.print("Garra");

  if (pinValue_claw == 1) {

    Serial.print("Aberta");
    Serial.println();
    
    claw.attach(clawPin);
    claw.write(claw_max_lim);
    delay(tmp_motors);
    claw.detach();
  }

  // Left Off
  else if (pinValue_claw == 0) {

    Serial.print("Fechada");
    Serial.println();

    claw.attach(clawPin);
    claw.write(claw_min_lim);
    delay(tmp_motors);
    claw.detach();
  }
}

void bottomMove(int pinValue_left, int pinValue_right) {

  // For LEFT (V1) Button
  Serial.print("Bottom");
  Serial.println();

  // Left On
  if ((pinValue_left == 1) && (pinValue_right == 0)) {

    Serial.print("Esquerda");
    Serial.println();

    bottom.attach(bottomPin);
    bottom.write(base_min_lim);  // Gira à esquerda
    delay(tmp_motors);
    bottom.detach();

  }

  // Left Off
  else if ((pinValue_left == 0) && (pinValue_right == 0)) {

    Serial.print("Centro");
    Serial.println();
    
    bottom.attach(bottomPin);
    bottom.write(base_padrao);  // Padroniza
    delay(tmp_motors);
    bottom.detach();
  }

  // For Right (V2) Button

  if ((pinValue_right == 1) && (pinValue_left == 0)) {  // On
    
    Serial.print("Direita");
    Serial.println();

    bottom.attach(bottomPin);
    bottom.write(base_max_lim);  // Gira à direita
    delay(tmp_motors);
    bottom.detach();
  }

  else if ((pinValue_right == 0) && (pinValue_left == 0)) {
    
    Serial.print("Centro");
    Serial.println();

    bottom.attach(bottomPin);
    bottom.write(base_padrao);  // Padroniza
    delay(tmp_motors);
    bottom.detach();
  }

  // For LEFT (V1) and RIGHT (V2) Button

  // Right and Left OFF
  else if (((pinValue_left == 0) && (pinValue_right == 0)) || ((pinValue_left == 1) && (pinValue_right == 1))) {  // left ON and right ON
    
    Serial.print("Centro");
    Serial.println();

    bottom.attach(bottomPin);
    bottom.write(base_padrao);  // Padroniza
    delay(tmp_motors);
    bottom.detach();
  }
}

void setup() {

  Serial.begin(9600);

  // Set ESP8266 baud rate
  EspSerial.begin(ESP8266_BAUD);

  Blynk.begin(auth, wifi, ssid, pass);

  // Pins
  /*
    left.attach(left);
    right.attach(right);
    bottom.attach(bottom);
    claw.attach(claw);
  */

  /* 
   *  // Joystick
  pinMode(axis_x, INPUT);
  pinMode(axis_y, INPUT);
  pinMode(button, INPUT);
  */
}

void loop() {
  {
    Blynk.run();
  }
}

BLYNK_WRITE(V1)  // Left
{
  pinValue_left = param.asInt();  // assigning incoming value from pin V1 to a variable
  bottomMove(pinValue_left, pinValue_right);
}
BLYNK_WRITE(V2)  // Right
{
  pinValue_right = param.asInt();  // assigning incoming value from pin V1 to a variable
  bottomMove(pinValue_left, pinValue_right);
}
BLYNK_WRITE(V3)  // Prof
{
  pinValue_prof = param.asInt();
  arm(pinValue_prof, pinValue_alt);
}
BLYNK_WRITE(V4)  // Alt
{
  pinValue_alt = param.asInt();
  top(pinValue_alt);
}
BLYNK_WRITE(V5)  // Prof
{
  pinValue_claw = param.asInt();
  top(pinValue_claw);
}
/*
    Testar função while

    while(on_off == 1){ 
    */




/*

  // Leitura dos pinos
  int angle_l = analogRead(0);
  int angle_r = analogRead(1);

  // Leitura do Botão do Joystick
  int btn = digitalRead(6);

  // Abrir e Fechar Garras
  if (btn==1){
    bottom.write(claw_max_lim);
    delay(tmp_motors);
  }
  else{
    bottom.write(claw_min_lim);
    delay(tmp_motors);
  }

  // Leitura e convesão para dois limites da Base
  base_ang = map(analogRead(axis_x), 0, 1023, base_max_lim, base_max_lim);

  // Conversão da voltagem Analógica para a Analógica dos Lados
  left_angle = map(angle_l, 0, 1023, left_min_lim, left_max_lim); // Altura
  right_angle = map(angle_r, 0, 1023, right_min_lim, right_max_lim); // Profundidade

  Serial.println("Profundidade: ");
  Serial.println(altura);

  Serial.println("Altura: ");
  Serial.println(profundidade);

  // Gira o Motor da Base
  bottom.write(base_ang);
  delay(tmp_motors);

  // Gira o Motor da Esquerda
  left.write(left_angle);
  delay(tmp_motors);

  // Gira o Motor da Direita
  right.write(right_angle);
  delay(tmp_motors);
  }
*/
